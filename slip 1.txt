/// Q 1 ///
--1--

import matplotlib.pyplot as plt
import numpy as np
def f(x):
return x**2
def g(x):
return x**3
x = np.linspace(-1, 1, 100)
y_f = f(x)
y_g = g(x)
fig, ax = plt.subplots()
ax.plot(x, y_f, label='f(x) = x^2')
ax.plot(x, y_g, label='g(x) = x^3')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.legend()
ax.set_title('2D Graph of f(x) = x^2 and g(x) = x^3')
plt.show()


--2--

import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-5, 5, 100)
y = np.exp(-x**2)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(x, y, np.zeros_like(x), linestyle='dashed', color='green', marker='^')
ax.set_xlabel('x')
ax.set_ylabel('f(x)')
ax.set_zlabel('z')
ax.set_title('3D Graph of f(x) = e**-x**2')
plt.show()


--3--

import matplotlib.pyplot as plt
left = [1,2,3,4,5]
height = [600,4000,200,1500,]
tick_label=[‘clothing’,’food’,’rent’,’petrol’,’Misc’]
plt.bar (left,height,tick_label = tick_label,width = 0.8 ,color = ['green','green'])
plt.xlabel('Item')
plt.ylabel('Expenditure')
plt. show()


/// Q 2 ///

--1--

import numpy as np
A = np.array([5, 3])
B = np.array([1, 4])
def reflect(line, point):
m = line[0]
c = line[1]
x, y = point
x_reflect = (2 * m * (y - c) + x * (m ** 2 - 1)) / (m ** 2 + 1)
y_reflect = (2 * m * x + y * (1 - m ** 2) + 2 * c) / (m ** 2 + 1)
return np.array([x_reflect, y_reflect])
line = np.array([1, -1])
A_reflected = reflect(line, A)
B_reflected = reflect(line, B)
print("Reflected Point A':", A_reflected)
print("Reflected Point B':", B_reflected)


--2--

import matplotlib.pyplot as plt
import numpy as np
vertices = np.array([[0, 0], [2, 0], [2, 3], [1, 6]])
plt.figure()
plt.plot(vertices[:, 0], vertices[:, 1], 'bo-')
plt.title('Original Polygon')
plt.xlabel('X')
plt.ylabel('Y')
theta = np.pi # 180 degrees
rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)],
                            [np.sin(theta), np.cos(theta)]])
vertices_rotated = np.dot(vertices, rotation_matrix)
plt.figure()
plt.plot(vertices_rotated[:, 0], vertices_rotated[:, 1], 'ro-')
plt.title('Rotated Polygon (180 degrees)')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()


--3--

import numpy as np
A = np.array([0, 0])
B = np.array([5, 0])
C = np.array([3, 3])
AB = np.linalg.norm(B - A)
BC = np.linalg.norm(C - B)
CA = np.linalg.norm(A - C)
s = (AB + BC + CA) / 2
area = np.sqrt(s * (s - AB) * (s - BC) * (s - CA))
perimeter = AB + BC + CA
print("Triangle ABC:")
print("Side AB:", AB)
print("Side BC:", BC)
print("Side CA:", CA)
print("Area:", area)
print("Perimeter:", perimeter)
OUTPUT:
Triangle ABC:
Side AB: 5.0
Side BC: 3.605551275463989
Side CA: 4.242640687119285
Area: 7.5000000000000036
Perimeter: 12.848191962583275
Transformed Point A: [38. 10.]
Transformed Point B: [35. 8.]

/// Q 3 ///

--A1--

from pulp import *
problem = LpProblem("LPP", LpMaximize)
x = LpVariable('x', lowBound=0, cat='Continuous')
y = LpVariable('y', lowBound=0, cat='Continuous')
problem += 150 * x + 75 * y, "Z"
problem += 4 * x + 6 * y <= 24, "Constraint1"
problem += 5 * x + 3 * y <= 15, "Constraint2"
problem.solve()
print("Status:", LpStatus[problem.status])
print("Optimal x =", value(x))
print("Optimal y =", value(y))
print("Optimal Z =", value(problem.objective

--B1--

Original point
x = 3
y = -1
print("Original point: ({}, {})".format(x, y))
x_reflected = x
y_reflected = -y
print("After reflection through X-axis: ({}, {})".format(x_reflected, y_reflected))
x_scaled = x * 2
y_scaled = y
print("After scaling in X-coordinate by factor 2: ({}, {})".format(x_scaled,
y_scaled))
x_scaled = x
y_scaled = y * 1.5
print("After scaling in Y-coordinate by factor 1.5: ({}, {})".format(x_scaled,
y_scaled))
x_reflected = y
y_reflected = x
print("After reflection through the line y = x: ({}, {})".format(x_reflected,
y_reflected))
