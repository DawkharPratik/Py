///Q1///

---1---

import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-2 * np.pi, 2 * np.pi, 1000) 
f_x = np.sin(x) 
g_x = np.cos(x) 
fig, ax = plt.subplots() 
ax.plot(x, f_x, label='f(x) = sin(x)') 
ax.plot(x, g_x, label='g(x) = cos(x)') 
ax.set_title('Graph of f(x) = sin(x) and g(x) = cos(x)') 
ax.set_xlabel('x') 
ax.set_ylabel('y') 
ax.legend()
plt.show()


---2---

import numpy as np
import matplotlib.pyplot as plt
def f(x):
 return np.exp(x) * np.sin(x)

x = np.linspace(-5*np.pi, 5*np.pi, 500)
y = f(x)
plt.plot(x, y, 'b^-', linewidth=1, markersize=4)
plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('2D Graph of f(x) = e^(x) * sin(x)')
plt.show()


///Q2///
---1---

import numpy as np
import matplotlib.pyplot as plt
A = np.array([-5, 2])
B = np.array([3, -4])
m = 2 
c = -1 
midpoint = (A + B) / 2
direction = np.array([1, m])
projection = (2 * midpoint.dot(direction) - 2 * c * direction) / (1 + m**2)
reflected_A = midpoint + (projection - midpoint)
reflected_B = midpoint - (projection - midpoint)
plt.plot([A[0], B[0]], [A[1], B[1]], 'bo-', label='Original Line Segment AB')
plt.plot([reflected_A[0], reflected_B[0]], [reflected_A[1], reflected_B[1]], 'ro-', 
		label='Reflected Line Segment A\'B\'')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Reflection of Line Segment AB through y = 2x - 1')
plt.grid()
plt.show()


---3---

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
x = np.linspace(-2 * np.pi, 2 * np.pi, 100)
y = np.linspace(-2 * np.pi, 2 * np.pi, 100)
X, Y = np.meshgrid(x, y)
Z = np.sin(X) + np.cos(Y)
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_wireframe(X, Y, Z)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Wireframe Plot of f(x, y) = sin(x) + cos(y)')
plt.show()

///Q3///

---A2---

import numpy as np
from scipy.optimize import linprog
c = [-3.5, -2]
A = [[-1, -1], [-1, 0], [0, 1]]
b = [-5, -4, 2]
x_bounds = (0, None)
y_bounds = (0, None)
result = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])
if result.success:
	print("Optimal solution found:")
	print("x =", result.x[0])
	print("y =", result.x[1])
	print("Maximum value of Z =", -result.fun)

else:
	print("Optimal solution not found.")


---B2---

import numpy as np
P = np.array([3, -2])
shearing_x_matrix = np.array([[1, -2], [0, 1]])
P_sheared_x = np.dot(shearing_x_matrix, P)
print("After Shearing in x direction by -2 units:")
print("Point P_sheared_x:", P_sheared_x)
scaling_matrix = np.array([[-2, 0], [0, 2]])
P_scaled_xy = np.dot(scaling_matrix, P)
print("After Scaling in x and y direction by -2 and 2 units respectively:")
print("Point P_scaled_xy:", P_scaled_xy)
reflection_x_axis_matrix = np.array([[1, 0], [0, -1]])
P_reflected_x_axis = np.dot(reflection_x_axis_matrix, P)
print("After Reflection through x axis:")
print("Point P_reflected_x_axis:", P_reflected_x_axis)
reflection_line_matrix = np.array([[0, -1], [-1, 0]])
P_reflected_line = np.dot(reflection_line_matrix, P)
print("After Reflection through the line y = -x:")
print("Point P_reflected_line:", P_reflected_line)

