///Q1///


---1---

import numpy as np 
import matplotlib.pyplot as plt 
x = np.linspace(-5 * np.pi, 5 * np.pi, 500) 
y = np.log(x**2) + np.sin(x) 
plt.plot(x, y) 
plt.xlabel('x-axis Label') # Label for x-axis 
plt.ylabel('y-axis Label') # Label for y-axis 
plt.title('2D Plot of y = log(x^2) + sin(x)') # Title of the plot 
plt.show()


---2---

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
x = np.linspace(-6, 6, 100)
y = np.linspace(-6, 6, 100)
X, Y = np.meshgrid(x, y)
Z = X**2 + Y**2
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.contour3D(X, Y, Z, 100, cmap='viridis')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title('3D Contour Plot of z = x^2 + y^2')
plt.show()


///Q2///

---1---

import numpy as np
A = np.array([0, 0])
B = np.array([2, 2])
C = np.array([0, 2])
AB = np.linalg.norm(B - A)
BC = np.linalg.norm(C - B)
AC = np.linalg.norm(C - A)
angle_A = np.arccos((AB**2 + AC**2 - BC**2) / (2 * AB * AC))
angle_B = np.arccos((-AB**2 + AC**2 + BC**2) / (2 * AC * BC))
angle_C = np.pi - angle_A - angle_B
angle_A_deg = np.degrees(angle_A)
angle_B_deg = np.degrees(angle_B)
angle_C_deg = np.degrees(angle_C)
print("Angle at vertex A: {:.2f} degrees".format(angle_A_deg))
print("Angle at vertex B: {:.2f} degrees".format(angle_B_deg))
print("Angle at vertex C: {:.2f} degrees".format(angle_C_deg))


---2---

import numpy as np
P = np.array([3, 6])
a = 1 # Coefficient of x in the line equation
b = -2 # Coefficient of y in the line equation
c = 4 # Constant term in the line equation
dist = abs(a * P[0] + b * P[1] + c) / np.sqrt(a**2 + b**2)
reflected_x = P[0] - 2 * a * dist / (a**2 + b**2)
reflected_y = P[1] - 2 * b * dist / (a**2 + b**2)
reflected_P = np.array([reflected_x, reflected_y])
print("Reflected Point: ({:.2f}, {:.2f})".format(reflected_P[0], reflected_P[1]))


///Q3///

---A2---

from pulp import *
prob = LpProblem("Maximization Problem", LpMaximize)
x = LpVariable("x", lowBound=0)
y = LpVariable("y", lowBound=0)
prob += x + y, "Objective Function"
prob += x + y <= 11, "Constraint 1"
prob += x >= 6, "Constraint 2"
prob += y >= 6, "Constraint 3"
prob.solve()
print("Status: ", LpStatus[prob.status])
print("Optimal Solution:")
print("x = ", value(x))
print("y = ", value(y))
print("Max Z = ", value(prob.objective))


---B1---

import math
def rotate_point(x, y, cx, cy, theta):
	dx = x - cx
	dy = y - cy
	cos_theta = math.cos(theta)
	sin_theta = math.sin(theta)
	new_x = cx + dx * cos_theta - dy * sin_theta
	new_y = cy + dx * sin_theta + dy * cos_theta
	return new_x, new_y

def distance_between_points(x1, y1, x2, y2):
	return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

def shear_point_x(x, y, shx):
	new_x = x + shx * y
	return new_x, y

class Point:
	def __init__(self, x, y):
 	self.x = x
 	self.y = y

x1, y1 = rotate_point(1, 1, 1, 4, math.pi / 2)
print("Rotated point: ({}, {})".format(x1, y1))
x2, y2 = 0, 0
x3, y3 = 1, 0
distance = distance_between_points(x2, y2, x3, y3)
print("Distance between points: {}".format(distance))
x4, y4 = shear_point_x(3, 4, 3)
print("Sheared point: ({}, {})".format(x4, y4))
p = Point(-2, 5)
print("Point: ({}, {})".format(p.x, p.y))


