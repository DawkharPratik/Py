/// Q 1 ///

--1--

import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(0,10)
y = np.log10(x)
plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('f(x) = log10(x)')
plt.title('2D Graph of f(x) = log10(x)')
plt.grid(True)
plt.show()


--2--

import numpy as np
import matplotlib.pyplot as plt
x = np.linspace(-1,1)
y = 1/np.sin(x)
plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('f(x) = sin-1(X)')
plt.title('2D Graph of f(x) = log10(x)')
plt.grid(True)
plt.show()


/// Q 2 ///

--1--

import numpy as np
import matplotlib.pyplot as plt
A = np.array([3, 1])
B = np.array([5, -1])
T = np.array([[3, -2],
[2, 1]])
A_transformed = np.dot(T, A)
B_transformed = np.dot(T, B)
A_transformed_x = A_transformed[0]
A_transformed_y = A_transformed[1]
B_transformed_x = B_transformed[0]
B_transformed_y = B_transformed[1]
m = (B_transformed_y - A_transformed_y) / (B_transformed_x - A_transformed_x)
b = A_transformed_y - m * A_transformed_x
print(f"The equation of the transformed line is: y = {m:.2f}x + {b:.2f}")


--3--

import matplotlib.pyplot as plt
import numpy as np
x = np.array([2, 4])
y = np.array([3, 3])
m = (y[1] - y[0]) / (x[1] - x[0])
b = y[0] - m * x[0]
print(f"The equation of the line is: y = {m:.2f}x + {b:.2f}")
plt.scatter(x, y, c='blue', label='Points')
plt.plot(x, m * x + b, c='red', label='Line')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Line Passing through Points')
plt.legend()
plt.show()


/// Q 3 ///

--A1--

from pulp import *
problem = LpProblem("LPP", LpMaximize)
x = LpVariable('x', lowBound=0, cat='Continuous')
y = LpVariable('y', lowBound=0, cat='Continuous')
problem += 150 * x + 75 * y, "Z"
problem += 4 * x + 6 * y <= 24, "Constraint1"
problem += 5 * x + 3 * y <= 15, "Constraint2"
problem.solve()
print("Status:", LpStatus[problem.status])
print("Optimal x =", value(x))
print("Optimal y =", value(y))
print("Optimal Z =", value(problem.objective


--B1--

import matplotlib.pyplot as plt
import numpy as np
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlabel('X-axis')
ax.set_zlabel('Z-axis')
points = {'(70, -25, 15)': (70, -25, 15),
	'(50, 72, -45)': (50, 72, -45),
	'(58, -82, 65)': (58, -82, 65),
	'(20, 72, -45)': (20, 72, -45)}
for label, (x, y, z) in points.items():
	if label == '(70, -25, 15)':
		ax.scatter(x, y, z, marker='D', color='black', label=label)
	elif label == '(50, 72, -45)':
		ax.scatter(x, y, z, marker='*', color='green', label=label)
	elif label == '(58, -82, 65)':
		ax.scatter(x, y, z, marker='.', color='green', label=label)
	elif label == '(20, 72, -45)':
		ax.scatter(x, y, z, marker='*', color='red', label=label)
ax.legend()
plt.show()

