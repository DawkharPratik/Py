/// Q 1 ///

--1--

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
def func(x, y):
return np.cos(x**2 + y**2 - 0.5)
x = np.linspace(-1, 1, 100)
y = np.linspace(-1, 1, 100)
X, Y = np.meshgrid(x, y) # Create a grid of x, y values
Z = func(X, Y) # Compute z values using the function
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis') # Plot the surface
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Surface Plot of z = cos(x**2 + y**2 - 0.5)')
plt.show()


--2--

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
def func(x, y):
	return np.sin(x**2 + y**2)

x = np.linspace(0, 10, 100)
y = np.linspace(0, 10, 100)
X, Y = np.meshgrid(x, y) # Create a grid of x, y values
Z = func(X, Y) # Compute z values using the function
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis') # Plot the surface
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Surface Plot of f(x) = sin(x**2 + y**2)')
plt.show()



/// Q 2 ///

--1--

import matplotlib.pyplot as plt
vertex1 = (0, 0)
vertex2 = (4, 0)
vertex3 = (4, 3)
x = [vertex1[0], vertex2[0], vertex3[0], vertex1[0]]
y = [vertex1[1], vertex2[1], vertex3[1], vertex1[1]]
plt.plot(x, y, 'b-o', label='Triangle')
plt.plot(vertex1[0], vertex1[1], 'ro', label='Vertex 1')
plt.plot(vertex2[0], vertex2[1], 'go', label='Vertex 2')
plt.plot(vertex3[0], vertex3[1], 'mo', label='Vertex 3')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Triangle with Vertices')
plt.legend()
plt.grid(True)
plt.show()


--2--

import numpy as np
start = -7
end = 7
num_subintervals = 50
x = np.linspace(start, end, num=num_subintervals+1)
print("Vector x:")
print(x)



/// Q 3 ///


--A1--

from scipy.optimize import linprog
c = [-5, -3]
A = [[1, 1],
[2, 5]]
b = [7, 1]
x_bounds = (0, None)
y_bounds = (0, None)
res = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds])
if res.success:
	print("Optimal solution found:")
	print("x =", res.x[0])
	print("y =", res.x[1])
	print("Maximum value of Z =", -res.fun)
else:
	print("Optimization failed. Message:", res.message)


--B1--

import numpy as np
P = np.array([3, 8])
P_reflection_y_axis = np.array([-P[0], P[1]])
P_scaling_x = np.array([6 * P[0], P[1]])
theta = np.deg2rad(30) # Convert angle from degrees to radians
rotation_matrix = np.array([[np.cos(theta), -np.sin(theta)],
[np.sin(theta), np.cos(theta)]])
P_rotation = np.dot(rotation_matrix, P)
reflection_line = np.array([[0, -1],
[-1, 0]])
P_reflection_line = np.dot(reflection_line, P)
print("Original Point P:", P)
print("Transformation I - Reflection through y-axis:", P_reflection_y_axis)
print("Transformation II - Scaling in X-coordinate by factor 6:", P_scaling_x)
print("Transformation III - Rotation about origin through an angle of 30
degrees:", P_rotation)
print("Transformation IV - Reflection through the line y = -x:", P_reflection_line)





